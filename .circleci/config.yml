version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      ID:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo << parameters.ID >>
            aws cloudformation delete-stack --stack-name UdaPeople-back-end-<< parameters.ID >>
            aws cloudformation delete-stack --stack-name UdaPeople-front-end-<< parameters.ID >>

SetUdiPeopleEnvVars: &SetUdiPeopleEnvVars
  environment:
    # Some environments are set in the CircleCI project level
    ENVIRONMENT: production
    TYPEORM_CONNECTION: postgres 
    TYPEORM_ENTITIES: "./src/modules/domain/**/*.entity{.ts, .js}"
    TYPEORM_MIGRATIONS: "./src/migrations/*.ts"
    TYPEORM_MIGRATIONS_DIR: "./src/migrations"
    NODE_ENV: production 
    TYPEORM_HOST: ${TYPEORM_HOST}
    TYPEORM_PORT: 5532 
    TYPEORM_USERNAME: ${TYPEORM_USERNAME}
    TYPEORM_PASSWORD: ${TYPEORM_PASSWORD} 
    TYPEORM_DATABASE: ${TYPEORM_DATABASE} 
#
#  revert-migrations:
#    description: Revert the last migration if successfully run in the current workflow.
#    parameters:
#      # Add parameter here     
#    steps:
#      - run:
#          name: Revert migrations
#          # Add when this will run
#          command: |
#            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#            SUCCESS = 1
#            if(( $SUCCESS==1 )); 
#            then
#            #  cd ~/project/backend
#            #  npm install
#            #  Add revert code here. You can find this in the Getting Started section.
#              exit 1
#            fi
#            
#    SetUdiPeopleEnvVars:
#      description: Setup UdiPeople environment variables
#      steps:
#        - run:
#          command: |
#            environment:
#              # Some environments are set in the CircleCI project level
#              ENVIRONMENT: production
#              TYPEORM_CONNECTION: postgres 
#              TYPEORM_ENTITIES: "./src/modules/domain/**/*.entity{.ts, .js}"
#              TYPEORM_MIGRATIONS: "./src/migrations/*.ts"
#              TYPEORM_MIGRATIONS_DIR: "./src/migrations"
#              NODE_ENV: production 
#              TYPEORM_HOST: ${TYPEORM_HOST}
#              TYPEORM_PORT: 5532 
#              TYPEORM_USERNAME: ${TYPEORM_USERNAME}
#              TYPEORM_PASSWORD: ${TYPEORM_PASSWORD} 
#              TYPEORM_DATABASE: ${TYPEORM_DATABASE} 

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            cd frontend
            npm i
            npm run lint
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             # exit 1
             cd backend
             npm i
             npm run lint
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Frontend test
          command: |
            cd frontend
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Backend test
          command: |
            cd backend
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Backend scan
          command: |
            cd backend
            npm install
            npm audit fix
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="UdaPeople" \
              --stack-name "UdaPeople-back-end-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="UdaPeople" \
              --stack-name "UdaPeople-front-end-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Add tar
          command: yum install -y tar
      - run:
          name: Add gzip
          command: yum install -y gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/python:latest
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace

    <<: *SetUdiPeopleEnvVars

    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["2d:12:50:a0:df:1c:e3:25:10:5b:74:fe:15:e2:7f:93"]
      - run:
          name: Install Ansible 
          command: |
            python -m pip install ansible
      - run:
          name: Install aws-cli
          command: |
            sudo apt-get install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
            exit 1
      # destroy environment if something wrong
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID}

#
#  run-migrations:
#    docker:
#      # Docker image here that supports NodeJS
#    steps:
#      # Checkout code from git
#      - run:
#          name: Run migrations
#          command: |
#            # Your code here
#            exit 1
#      - run:
#          name: Send migration results to memstash
#          command: |
#            # Your code here
#            exit 1
#     # Here's where you will add some code to rollback on failure      
#
#  deploy-frontend:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#            export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
#      - run:
#          name: Deploy frontend objects
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure      
#                    
#  deploy-backend:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Deploy backend
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#  smoke-test:
#    docker:
#      # Lightweight Docker image 
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
#            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure  
#
#  cleanup:
#      docker:
#        # Docker image here
#      steps:
#        # Checkout code from git
#        - run:
#            name: Get old stack workflow id
#            command: |
#              # your code here
#              export OldWorkflowID="the id here"
#              export STACKS=[] #put the list of stacks here
#        - run:
#            name: Remove old stacks and files
#            command: |
#              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#              then
#                # your code here
#              fi
            

workflows:
  default:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
      - deploy-infrastructure
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
#      - run-migrations:
#          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]