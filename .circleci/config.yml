version: 2.1

parameters:
  memstash_token:
    type: string
    default: 22f83c2a-ce36-452f-9b4f-5a822f20fcbd
  run_id:
    type: string
    default: ${CIRCLE_WORKFLOW_ID:24}
  project_workflow_id:
    type: string
    default: phm6cd4e27cfc53

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      ID:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo << parameters.ID >>

            # First, we have to empty S3 before delete it
            aws s3 rm --recursive s3://udapeople-<< parameters.ID >>

            # then remove frontend, backend stack
            aws cloudformation delete-stack --stack-name UdaPeople-back-end-<< parameters.ID >>
            aws cloudformation delete-stack --stack-name UdaPeople-front-end-<< parameters.ID >>


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
      ID:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            echo << parameters.ID >>
            SUCCESS=$(curl -H "token: << pipeline.parameters.memstash_token >>" --request GET https://api.memstash.io/values/migration_<< parameters.ID >>)
            echo $SUCCESS
            pwd
            if [ "$SUCCESS" -eq 1 ]
            then
              echo "revert migration"
              cd backend
              npm run migrations:revert
            fi

SetUdiPeopleEnvVars: &SetUdiPeopleEnvVars
  environment:
    # Some environments are set in the CircleCI project level
    ENVIRONMENT: production
    TYPEORM_CONNECTION: postgres 
    TYPEORM_ENTITIES: "./src/modules/domain/**/*.entity{.ts, .js}"
    TYPEORM_MIGRATIONS: "./src/migrations/*.ts"
    TYPEORM_MIGRATIONS_DIR: "./src/migrations"
    NODE_ENV: production 
    TYPEORM_HOST: ${TYPEORM_HOST}
    TYPEORM_PORT: 5432 
    TYPEORM_USERNAME: ${TYPEORM_USERNAME}
    TYPEORM_PASSWORD: ${TYPEORM_PASSWORD} 
    TYPEORM_DATABASE: ${TYPEORM_DATABASE} 

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            cd frontend
            npm i
            npm run lint
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             # exit 1
             cd backend
             npm i
             npm run lint
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Frontend test
          command: |
            cd frontend
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Backend test
          command: |
            cd backend
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Backend scan
          command: |
            cd backend
            npm install
            npm audit fix
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="UdaPeople" \
              --stack-name "UdaPeople-back-end-<< pipeline.parameters.run_id >>" \
              --parameter-overrides ID=<< pipeline.parameters.run_id >>  
              #--parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="UdaPeople" \
              --stack-name "UdaPeople-front-end-<< pipeline.parameters.run_id >>" \
              --parameter-overrides ID=<< pipeline.parameters.run_id >>  
              #--parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Add tar
          command: yum install -y tar
      - run:
          name: Add gzip
          command: yum install -y gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          ID: << pipeline.parameters.run_id >> 

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/python:latest
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace

    <<: *SetUdiPeopleEnvVars

    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["2d:12:50:a0:df:1c:e3:25:10:5b:74:fe:15:e2:7f:93"]
      - run:
          name: Install Ansible 
          command: |
            python -m pip install ansible
      - run:
          name: Install aws-cli
          command: |
            sudo apt-get install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      # destroy environment if something wrong
      - destroy-environment:
          ID: << pipeline.parameters.run_id >> 

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm i
            npm run migrations | tee migration.log
            migration_status=$(grep -c "has been executed successfully" migration.log)
            if [ $migration_status -le 0 ]
            then
              echo "bad migration"
              exit 1
            fi
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
              curl -H "Content-Type: text/plain" \
              -H "token: << pipeline.parameters.memstash_token >>" \
              --request PUT --data "1" \
              https://api.memstash.io/values/migration_<< pipeline.parameters.run_id >>
      - run:
          name: Install aws-cli
          when: on_fail
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - revert-migrations:
          ID: << pipeline.parameters.run_id >>
      - destroy-environment:
          ID: << pipeline.parameters.run_id >>
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(tail -n 1 .circleci/ansible/inventory.txt)
            echo $BACKEND_IP
            echo "export API_URL=http://${BACKEND_IP}:3030" >> $BASH_ENV
            echo $API_URL
      - run:
          name: Build Frontend
          command: |
            cd frontend
            echo $API_URL
            npm run build
            ls -lR dist
      - run:
          name: Add aws-cli
          command: |
            sudo apt-get update
            #sudo apt-get install awscli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            aws --version
            aws s3 cp --recursive frontend/dist "s3://udapeople-<< pipeline.parameters.run_id >>"         
       # Here's where you will add some code to rollback on failure      
      - revert-migrations:
          ID: << pipeline.parameters.run_id >>
      - destroy-environment:
          ID: << pipeline.parameters.run_id >>
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/python:latest
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["2d:12:50:a0:df:1c:e3:25:10:5b:74:fe:15:e2:7f:93"]
      - run:
          name: Install Ansible 
          command: |
            python -m pip install ansible
      - run:
          name: Install npm nodejs
          command: |
            sudo apt install npm nodejs
      - run: 
          name: Tar backend 
          command: |
            #cd backend
            #npm install
            #npm run build 
            ls -l
            tar cvf original.backend.tar backend
      - run:
          name: Deploy server
          command: |
            pwd 
            ls -l
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      - run:
          name: Install aws-cli
          when: on_fail
          command: |
            sudo apt-get install awscli
      - revert-migrations:
          ID: << pipeline.parameters.run_id >>
      - destroy-environment:
          ID: << pipeline.parameters.run_id >>

  smoke-test:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/python:latest
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install curl 
          command: |
            # your code here
            sudo apt install curl
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(tail -n 1 .circleci/ansible/inventory.txt)
            echo $BACKEND_IP
            echo "export API_URL=http://${BACKEND_IP}:3030/api/status" >> $BASH_ENV
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            echo $API_URL
            curl --connect-timeout 10 -s $API_URL
            retval=$?

            echo $retval

            if [ $retval -eq 0 ]
            then
               echo "Backend OK"
               exit 0
            else
               echo "Backend Fail"
               exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            curl --connect-timeout 10 -s http://udapeople-<< pipeline.parameters.run_id >>.s3-website-us-west-2.amazonaws.com | grep "Welcome"
            retval=$?

            echo $retval

            if [ $retval -eq 0 ]
            then
               echo "Frontend OK"
               #exit 0
            else
               echo "Backend Fail"
               #exit 1
            fi
      # Here's where you will add some code to rollback on failure  
      - run:
          name: Install aws-cli
          when: on_fail
          command: |
            sudo apt-get install awscli
      - revert-migrations:
          ID: << pipeline.parameters.run_id >>
      - destroy-environment:
          ID: << pipeline.parameters.run_id >>

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      #- run:
      #    name: Install dependencies
      #    command: |
      #      # your code here
      - run:
          name: Get old WorkflowID
          command: |
            OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $OldWorkflowID
            echo "export SaveWorkflowID=$OldWorkflowID" >> $BASH_ENV
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            echo $SaveWorkflowID

            # Update cloudfront to current frontend deployment 
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project="UdaPeople" \
              --stack-name "UdaPeople-cloudfront" \
              --parameter-overrides WorkflowID=<< pipeline.parameters.run_id >>
      - run:
          name: Save workflowid to file for workspace persist
          command: |
            echo $SaveWorkflowID

            # Save workflowid
            echo $SaveWorkflowID > ~/project/workflowid.txt
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/workflowid.txt
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          ID: << pipeline.parameters.run_id >>
      - destroy-environment:
          ID: << pipeline.parameters.run_id >>

  cleanup:
      docker:
        # Docker image here
      - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Install dependencies
            command: |
              yum install -y tar gzip
        - attach_workspace:
            at: ~/
        - run:
            name: Get old stack workflow id from workspace
            command: |
              # your code here
              OldWorkflowID=$(cat ~/project/workflowid.txt)

              # Save id for next step
              echo "export SaveWorkflowID=$OldWorkflowID" >> $BASH_ENV
        - run:
            name: Clean up the old deployment
            command: |
              # First, we have to empty S3 before delete it
              aws s3 rm --recursive s3://udapeople-${SaveWorkflowID}

              # we will determine if the pass in ID == project_workflow_id, 
              # if they are the same, it means we don't have frontend, backend stack
              # to remove. We will remove the manual create S3 only
              if [ $SaveWorkflowID == << pipeline.parameters.project_workflow_id >> ]
              then
                # remove the manual create S3 only
                aws s3 rb s3://udapeople-${SaveWorkflowID}
              else
                # remove frontend, backend stack    
                aws cloudformation delete-stack --stack-name UdaPeople-back-end-${SaveWorkflowID}
                aws cloudformation delete-stack --stack-name UdaPeople-front-end-${SaveWorkflowID}
              fi

workflows:
  default:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
      - deploy-infrastructure
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
##########      - configure-infrastructure:
##########          requires: [deploy-infrastructure]
###########      - run-migrations:
###########          requires: [configure-infrastructure]
##########      - deploy-frontend:
##########          requires: [configure-infrastructure] # this line should be deleted!!!
###########          requires: [run-migrations]
##########      - deploy-backend:
##########          requires: [configure-infrastructure] # this line should be deleted!!!
###########          requires: [run-migrations]
##########      - smoke-test:
##########          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [deploy-infrastructure] # this line should be deleted!!!
          #requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]